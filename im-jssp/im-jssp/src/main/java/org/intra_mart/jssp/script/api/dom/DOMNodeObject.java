package org.intra_mart.jssp.script.api.dom;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.intra_mart.jssp.util.RuntimeObject;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.FunctionObject;
import org.mozilla.javascript.JavaScriptException;
import org.mozilla.javascript.NativeArray;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import org.w3c.dom.DOMException;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * DOM ツリーのノードオブジェクトです。<br/>
 * <br/>
 * DOM ツリーのノードを示すオブジェクトです。<br/>
 * 
 * @scope public 
 * @name DOMNode
 */
public class DOMNodeObject extends ScriptableObject implements Serializable{

	private static final ScriptableObject PROTOTYPE = new DOMNodeObject();

    /** 
     * エレメントノード（ノード種別）。
     * @scope public
     */
    public static final int ELEMENT_NODE = Node.ELEMENT_NODE;
    
    /** 
     * 属性ノード（ノード種別）。
     * @scope public
     */
    public static final int ATTRIBUTE_NODE = Node.ATTRIBUTE_NODE;

    /** 
     * テキストノード（ノード種別）。
     * @scope public
     */
    public static final int TEXT_NODE = Node.TEXT_NODE;

    /** 
     * CDDATAセクションノード（ノード種別）。
     * @scope public
     */
    public static final int CDATA_SECTION_NODE = Node.CDATA_SECTION_NODE;

    /** 
     * エンティティリファレンスノード（ノード種別）。
     * @scope public
     */
    public static final int ENTITY_REFERENCE_NODE = Node.ENTITY_REFERENCE_NODE;

    /** 
     * エンティティノード（ノード種別）。
     * @scope public
     */
    public static final int ENTITY_NODE = Node.ENTITY_NODE;

    /** 
     * PROCESSING INSTRUCTION ノード（ノード種別）。
     * @scope public
     */
    public static final int PROCESSING_INSTRUCTION_NODE = Node.PROCESSING_INSTRUCTION_NODE;

    /** 
     * コメントノード（ノード種別）。
     * @scope public
     */
    public static final int COMMENT_NODE = Node.COMMENT_NODE;

    /** 
     * ドキュメントノード（ノード種別）。
     * @scope public
     */
    public static final int DOCUMENT_NODE = Node.DOCUMENT_NODE;

    /** 
     * ドキュメントタイプノード（ノード種別）。
     * @scope public
     */
    public static final int DOCUMENT_TYPE_NODE = Node.DOCUMENT_TYPE_NODE;

    /** 
     * ドキュメントフラグメントノード（ノード種別）。
     * @scope public
     */
    public static final int DOCUMENT_FRAGMENT_NODE = Node.DOCUMENT_FRAGMENT_NODE;

    /** 
     * ノーテーションノード（ノード種別）。
     * @scope public
     */
    public static final int NOTATION_NODE = Node.NOTATION_NODE;

    /**
     * it will be called to finish any initialization
     * @param scope
     * @param ctor
     * @param proto
     */
    public static void finishInit(Scriptable scope, FunctionObject ctor, Scriptable proto) {
        int attr = ScriptableObject.PERMANENT |
                   ScriptableObject.READONLY;

        String[] names = {
		                  "ELEMENT_NODE",
		                  "ATTRIBUTE_NODE",
		                  "TEXT_NODE",
		                  "CDATA_SECTION_NODE",
		                  "ENTITY_REFERENCE_NODE",
		                  "ENTITY_NODE",
		                  "PROCESSING_INSTRUCTION_NODE",
		                  "COMMENT_NODE",
		                  "DOCUMENT_NODE",
		                  "DOCUMENT_TYPE_NODE",
		                  "DOCUMENT_FRAGMENT_NODE",
		                  "NOTATION_NODE"
                          };
        Number[] values = {
			                new Integer(ELEMENT_NODE),
			                new Integer(ATTRIBUTE_NODE),
			                new Integer(TEXT_NODE),
							new Integer(CDATA_SECTION_NODE),
							new Integer(ENTITY_REFERENCE_NODE),
							new Integer(ENTITY_NODE),
							new Integer(PROCESSING_INSTRUCTION_NODE),
							new Integer(COMMENT_NODE),
							new Integer(DOCUMENT_NODE),
							new Integer(DOCUMENT_TYPE_NODE),
							new Integer(DOCUMENT_FRAGMENT_NODE),
							new Integer(NOTATION_NODE)
		                  };
        for (int i=0; i < names.length; i++) {
            ctor.defineProperty(names[i], values[i], attr);
        }
    }

	private Node item;
	private NamedNodeMap attributes;
	private NodeList childNodes;
	private List<DOMAttributeObject> attributeScriptObjects = new ArrayList<DOMAttributeObject>();
	private List<DOMNodeObject> childScriptObjects = new ArrayList<DOMNodeObject>();
	private DOMNodeObject parentNode = null;

	/*
     * (非Javadoc) コンストラクタ。 <br/><br/>
     * 本オブジェクトは、new演算子を用いて生成することはできません。
     * DOMDocumentオブジェクトの該当メソッドから生成されます。
     */
	public static Object jsConstructor(Context cx, 
										Object[] args, 
										Function ctorObj, 
										boolean inNewExpr)
									throws JavaScriptException
	{
		throw new RuntimeException("This object cannot be generated by using the `new' operator.");
		
	}

	/**
	 * プロトタイプ用のコンストラクタです。
	 */
	public DOMNodeObject(){
		// 基本メソッドの登録
		try{
			String[] names = {
								"getName",
								"getValue",
								"appendChild",
								"cloneNode",
								"getAttribute",
								"getAttributes",
								"hasAttribute",
								"hasAttributes",
								"hasChildNodes",
								"getChildNodes",
								"insertBefore",
								"normalize",
								"getParentNode",
								"getNodeType",
								"removeAttribute",
								"removeChild",
								"replaceChild",
								"setAttribute",
								"getTagName",
								"toString"
							};
			this.defineFunctionProperties(names, DOMNodeObject.class, ScriptableObject.DONTENUM);
		}
		catch(Exception e){
			System.out.println("Error in DOMNodeObject constructor: " + e.getMessage());
		}
	}

	/**
	 * @param item
	 * @throws NullPointerException
	 */
	public DOMNodeObject(Node item) throws NullPointerException{
		if(item != null){
			initialize(item);
			// 基本メソッドの追加登録
			this.setPrototype(PROTOTYPE);
		}
		else{
			throw new NullPointerException();
		}
	}
	
	/**
	 * @param item
	 * @param parentNode
	 * @throws NullPointerException
	 */
	public DOMNodeObject(Node item, DOMNodeObject parentNode) throws NullPointerException{
		if(item != null){
			setParentNode(parentNode);
			initialize(item);
			// 基本メソッドの追加登録
			this.setPrototype(PROTOTYPE);
		}
		else{
			throw new NullPointerException();
		}
	}

	/**
	 * JavaScript 実行環境下での名称取得メソッド
	 * @return 実行環境上での名称
	 */
	public String getClassName() {
		return "DOMNode";
	}


	/**
	 * 親ノードの設定。<br/>
	 * 指定のノードをこのノードの親ノードに設定します。
	 * 
	 * @scope private
	 * @param parentNode ノードデータ
	 */
	protected void setParentNode(DOMNodeObject parentNode){
		this.parentNode = parentNode;
	}

	/**
	 * このデータオブジェクトの初期化。
	 * ＡＰＩとして必要なプロパティなどをセットします。
	 * 
	 * @scope private
	 * @param item ノードデータ
	 */
	protected void initialize(Node item){
		this.item = item;

		String nodeValue = this.item.getNodeValue();
		if(nodeValue != null){
			this.defineProperty("data", nodeValue, ScriptableObject.EMPTY);
			this.defineProperty("nodeValue", nodeValue, ScriptableObject.EMPTY);
		}
		String nodeName = this.item.getNodeName();
		if(nodeName != null){
			this.defineProperty("name", nodeName, ScriptableObject.EMPTY);
		}
		this.defineProperty("nodeName", this.item.getNodeName(), ScriptableObject.READONLY);
		this.defineProperty("nodeType", new Short(this.item.getNodeType()), ScriptableObject.READONLY);

		defineAttributes();
		defineChilds();
	}
	private void defineAttributes(){
		this.attributes = this.item.getAttributes();
		if(this.item.hasAttributes()){
			int max = this.attributes.getLength();
			for(int idx = 0; idx < max; idx++){
				attributeScriptObjects.add(new DOMAttributeObject(this.attributes.item(idx)));
			}
		}
		else{
			attributeScriptObjects.clear();
		}
		defineAttributesProperty();
	}
	private void defineAttributesProperty(){
		if(! attributeScriptObjects.isEmpty()){
			ScriptableObject attrs = RuntimeObject.newArrayInstance(attributeScriptObjects.toArray());
			int max = attributeScriptObjects.size();
			for(int idx = 0; idx < max; idx++){
				Node attrNode = this.attributes.item(idx);
				attrs.defineProperty(attrNode.getNodeName(), attrNode.getNodeValue(), ScriptableObject.EMPTY);
			}
			this.defineProperty("attributes", attrs, ScriptableObject.EMPTY);
			Node className = this.attributes.getNamedItem("class");
			if(className != null){
				this.defineProperty("className", className.getNodeValue(), ScriptableObject.EMPTY);
			}
		}
		else{
			this.defineProperty("attributes", RuntimeObject.newArrayInstance(), ScriptableObject.EMPTY);
		}
	}
	private void defineChilds(){
		this.childNodes = this.item.getChildNodes();
		if(this.item.hasChildNodes()){
			int max = this.childNodes.getLength();
			for(int idx = 0; idx < max; idx++){
				try{
					childScriptObjects.add(new DOMNodeObject(this.childNodes.item(idx), this));
				}
				catch(NullPointerException npe){
					// ？？？
				}
			}
		}
		else{
			childScriptObjects.clear();
		}
		defineChildsProperty();
	}
	private void defineChildsProperty(){
		if(! childScriptObjects.isEmpty()){
			this.defineProperty("childNodes", RuntimeObject.newArrayInstance(childScriptObjects.toArray()), ScriptableObject.EMPTY);
		}
		else{
			this.defineProperty("childNodes", RuntimeObject.newArrayInstance(), ScriptableObject.EMPTY);
		}
	}

	/**
	 * このオブジェクトが表すノードを返却
	 * 
	 * @scope private
	 * @return このオブジェクトが表すノード
	 */
	protected Node whoami(){
		return this.item;
	}

	/**
	 * このオブジェクトの文字列表現を取得メソッド
	 * ノードの値を取得します。
	 * 
	 * @scope private
	 * @return ノードの値
	 */
	public String toString(){
		return getValue();
	}

	/**
	 * ノード名を取得します。<br/>
	 * <br/>
	 * @scope public
	 * @return String ノード名
	 */
	public String getName(){
		return this.item.getNodeName();
	}

	/**
	 * ノードの値を取得します。<br/>
	 * <br/>
	 * @scope public
	 * @return String ノードの値
	 */
	public String getValue(){
		return this.item.getNodeValue();
	}

	/**
	 * ノードの種別を取得します。<br/>
	 * <br/>
	 * @scope public
	 * @return Number ノード種別
	 */
	public short getNodeType(){
		return this.item.getNodeType();
	}

	/**
	 * このノードに子ノードを追加します。<br/>
	 * <br/>
	 * このノードの子供として、子供ノード列の最後に newChild を追加します。<br/>
	 * 追加する子ノードは、
	 * <a href='d_o_m_document.html#createElementString'> DOMDocument.createElement()</a> から作成します。<br/>
	 * 
	 * @scope public
	 * @param newChild DOMNode 新しいノード
	 * @return Boolean ノードの追加に成功した場合 true、そうでない場合 false
	 */
	public boolean appendChild(Object newChild){
		if(newChild instanceof DOMNodeObject){
			
			DOMNodeObject nodeObject = (DOMNodeObject) newChild;

			try{
				this.item.appendChild(nodeObject.whoami());
				nodeObject.setParentNode(this);
				this.childNodes = this.item.getChildNodes();
				this.childScriptObjects.add(nodeObject);
				defineChildsProperty();
				return true;
			}
			catch(DOMException dome){
				return false;
			}
		}

		return false;
	}

	/**
	 * ノードのコピーを作成します。<br/>
	 * <br/>
	 * deep が true の場合、このノードの持つ子供もすべてコピーし、 
	 * そうでない場合、このノードのみをコピーします。<br/>
	 * 
	 * @scope public
	 * @param deep Boolean コピーレベルを指定する真偽値
	 * @return DOMNode コピーによって新しく作成されたノード
	 */
	public Object cloneNode(boolean deep){
		try{
			return new DOMNodeObject(this.item.cloneNode(deep));
		}
		catch(NullPointerException npe){
			return null;
		}
	}

	/**
	 * 属性値を取得します。<br/>
	 * <br/>
	 * このノードの属性の中から、name にマップされている値を返します。<br/>
	 * name にマップされた値が存在しない場合 null を返します。<br/>
	 * また、このノードが属性を持つ要素ではない場合 null を返します。<br/>
	 * 
	 * @scope public
	 * @param name String 属性名
	 * @return String 属性値
	 */
	public String getAttribute(java.lang.String name){
		if(this.item.getNodeType() == Node.ELEMENT_NODE){
			return ((Element) this.item).getAttribute(name);
		}
		return null;
	}

	/**
	 * 属性情報の一覧を取得します。<br/>
	 * <br/>
	 * このノードが持つすべての属性を配列で返します。 <br/>
	 * このノードが属性を１つも持たない場合、空の配列が返されます。<br/>
	 * 返される配列の各要素は、{@link DOMAttribute} オブジェクトです。
	 * 
	 * @scope public
	 * @return Array このノードが持つすべての属性({@link DOMAttribute})の配列
	 */
	public NativeArray getAttributes(){
		if(! attributeScriptObjects.isEmpty()){
			return RuntimeObject.newArrayInstance(attributeScriptObjects.toArray());
		}
		else{
			return RuntimeObject.newArrayInstance();
		}
	}

	/**
	 * 指定の属性名が存在するかどうか判定します。<br/>
	 * <br/>
	 * このノードが属性を持つ要素ではない場合 false を返します。<br/>
	 * 
	 * @scope public
	 * @param name String 属性名
	 * @return Boolean true : 存在する / false : 存在しない
	 */
	public boolean hasAttribute(java.lang.String name){
		if(this.item.getNodeType() == Node.ELEMENT_NODE){
			return ((Element) this.item).hasAttribute(name);
		}
		return false;
	}

	/**
	 * このノードが属性を持っているかどうか判定します。<br/>
	 * <br/>
	 * このノードが１つ以上の属性を持っている場合 true を返します。<br/>
	 * 
	 * @scope public
	 * @return Boolean true : 属性が存在する / false : 属性が存在しない
	 */
	public boolean hasAttributes(){
		return this.item.hasAttributes();
	}

	/**
	 * このノードが子ノードを持っているかどうか判定します。<br/>
	 * <br/>
	 * このノードが１つ以上の子供ノードを持っている場合 true を返します。<br/>
	 * 
	 * @scope public
	 * @return Boolean true : 子ノードが存在する / false : 子ノードが存在しない
	 */
	public boolean hasChildNodes(){
		return this.item.hasChildNodes();
	}

	/**
	 * 子ノードの一覧を取得します。<br/>
	 * <br/>
	 * このノードが持つすべての子供ノードを配列で返します。<br/>
	 * このノードが子供を１つも持たない場合、空の配列が返されます。<br/>
	 * 返される配列の各要素は、{@link DOMNode} オブジェクトです。<br/>
	 * 
	 * @scope public
	 * @return Array このノードが持つすべてのノード({@link DOMNode})の配列
	 */
	public NativeArray getChildNodes(){
		if(! childScriptObjects.isEmpty()){
			return RuntimeObject.newArrayInstance(childScriptObjects.toArray());
		}
		else{
			return RuntimeObject.newArrayInstance();
		}
	}

	/**
	 * 新しい子ノードを追加します。<br/>
	 * <br/>
	 * このノードの子供ノード refChild の位置に、新しいノード newChild を追加します。<br/>
	 * 追加する子ノードは、
	 * <a href='d_o_m_document.html#createElementString'> DOMDocument.createElement()</a> から作成します。<br/>
	 * 
	 * @scope public
	 * @param newChild DOMNode 新しく追加するノード
	 * @param refChild DOMNode 追加すべきノードの位置
	 * @return Boolean ノードの追加に成功した場合 true、そうでない場合 false
	 */
	public boolean insertBefore(Object newChild, Object refChild){
		try{
			if(newChild instanceof DOMNodeObject){
				if(refChild instanceof DOMNodeObject){
					this.item.insertBefore(((DOMNodeObject) newChild).whoami(), ((DOMNodeObject) refChild).whoami());
					defineChilds();
					return true;
				}
			}
		}
		catch(DOMException dome){
			return false;
		}

		return false;
	}

	/**
	 * 子ノードを統合します。<br/>
	 * <br/>
	 * このノードの持つ子供ノードのうち隣接しているテキストノード同士を統合します。<br/>
	 * このメソッド実行後は、テキストノードと他のテキストノードが隣り合った状態はなくなります。<br/>
	 * 
	 * @scope public
	 */
	public void normalize(){
		this.item.normalize();
	}

	/**
	 * 親ノードを取得します。<br/>
	 * <br/>
	 * このノードの親にあたるノードを返します。<br/>
	 * このノードが親を持たない場合は null を返します。<br/>
	 * 
	 * @scope public
	 * @return DOMNode 親ノード
	 */
	public DOMNodeObject getParentNode(){
		return parentNode;
	}

	/**
	 * 属性を削除します。<br/>
	 * <br/>
	 * このノードのnameで指定された属性を削除します。<br/>
	 * 
	 * @scope public
	 * @param name String 属性名
	 */
	public void removeAttribute(java.lang.String name){
		if(this.item.getNodeType() == Node.ELEMENT_NODE){
			try{
				((Element) this.item).removeAttribute(name);
				defineAttributes();
			}
			catch(DOMException dome){
				// 消去失敗？？？
			}
		}
	}

	/**
	 * 子ノードを削除します。<br/>
	 * <br/>
	 * このノードのoldChildで指定された子ノードを削除します。<br/>
	 * 
	 * @scope public
	 * @param oldChild DOMNode 削除する子ノード
	 * @return Boolean true : 削除成功 / false : 削除失敗 
	 */
	public boolean removeChild(Object oldChild){
		if(oldChild instanceof DOMNodeObject){
			try{
				this.item.removeChild(((DOMNodeObject) oldChild).whoami());
				defineChilds();
				return true;
			}
			catch(DOMException dome){
				// 消去失敗？？？
				return false;
			}
		}
		return false;
	}

	/**
	 * 子ノードの置き換えます。<br/>
	 * <br/>
	 * このノードの子供の中から oldChile を削除して、
	 * oldChild の保存されていた位置に newChild を挿入します。<br/>
	 * 
	 * @scope public
	 * @param newChild DOMNode 新しく追加するノード
	 * @param oldChild DOMNode 追加するノードの位置 
	 * @return Boolean ノードの置換に成功した場合 true、そうでない場合 false
	 */
	public boolean replaceChild(Object newChild, Object oldChild){
		try{
			if(newChild instanceof DOMNodeObject){
				if(oldChild instanceof DOMNodeObject){
					this.item.replaceChild(((DOMNodeObject) newChild).whoami(), ((DOMNodeObject) oldChild).whoami());
					defineChilds();
					return true;
				}
			}
		}
		catch(DOMException dome){
			return false;
		}

		return false;
	}

	/**
	 * 属性を設定します。<br/>
	 * <br/>
	 * このノードに属性を設定します。<br/>
	 * 
	 * @scope public
	 * @param name String 属性名
	 * @param value String 属性値
	 */
	public void setAttribute(java.lang.String name, java.lang.String value){
		if(this.item.getNodeType() == Node.ELEMENT_NODE){
			((Element) this.item).setAttribute(name, value);
		}
	}

	/**
	 * タグ名を取得します。<br/>
	 * <br/>
	 * このノードの示すタグ名を返します。<br/>
	 * このノードがタグを示す要素でない場合 null を返します。<br/>
	 * 
	 * @scope public
	 * @return タグ名
	 */
	public String getTagName(){
		if(this.item.getNodeType() == Node.ELEMENT_NODE){
			return ((Element) this.item).getTagName();
		}
		return null;
	}
}
